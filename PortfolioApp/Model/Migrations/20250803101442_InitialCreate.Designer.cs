// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

#nullable disable

namespace PortfolioApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250803101442_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PortfolioApp.Enities.Chain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("RpcUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("rpcurl");

                    b.Property<string>("SwapApi")
                        .HasColumnType("longtext")
                        .HasColumnName("swapapi");

                    b.HasKey("Id");

                    b.ToTable("chains");
                });

            modelBuilder.Entity("PortfolioApp.Enities.CoinHolding", b =>
                {
                    b.Property<string>("WalletAddress")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("walletaddress")
                        .HasColumnOrder(0);

                    b.Property<string>("WalletEmail")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("walletemail")
                        .HasColumnOrder(1);

                    b.Property<string>("TokenAddress")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tokenaddress")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("amount");

                    b.Property<int>("Decimals")
                        .HasColumnType("int")
                        .HasColumnName("decimals");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("symbol");

                    b.Property<string>("TokenName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TokenName");

                    b.Property<decimal>("UsdValue")
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("usdvalue");

                    b.HasKey("WalletAddress", "WalletEmail", "TokenAddress");

                    b.ToTable("coinholdings");
                });

            modelBuilder.Entity("PortfolioApp.Enities.PendingUser", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlainPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Token");

                    b.ToTable("pending_users");
                });

            modelBuilder.Entity("PortfolioApp.Enities.PortfolioSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.Property<decimal>("TotalValueUsd")
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("totalvalueusd");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("useremail");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail");

                    b.ToTable("portfoliosnapshots");
                });

            modelBuilder.Entity("PortfolioApp.Enities.RebalanceSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdat");

                    b.Property<ulong>("IsConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("isconfirmed");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("useremail");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail");

                    b.ToTable("rebalancesessions");
                });

            modelBuilder.Entity("PortfolioApp.Enities.RebalanceSwap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("amount");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fromaddress");

                    b.Property<string>("FromSymbol")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fromsymbol");

                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("sessionid");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("toaddress");

                    b.Property<string>("ToSymbol")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tosymbol");

                    b.Property<string>("TxHash")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("txhash");

                    b.Property<decimal>("UsdValue")
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("usdvalue");

                    b.Property<string>("WalletEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("walletemail");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("walletid");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("WalletId", "WalletEmail");

                    b.ToTable("rebalanceswaps");
                });

            modelBuilder.Entity("PortfolioApp.Enities.TargetAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<double>("CurrentAllocationPercent")
                        .HasColumnType("double")
                        .HasColumnName("currentallocationpercent");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("symbol");

                    b.Property<double>("TargetPercent")
                        .HasColumnType("double")
                        .HasColumnName("targetpercent");

                    b.Property<double>("TolerancePercent")
                        .HasColumnType("double")
                        .HasColumnName("tolerancepercent");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("useremail");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail");

                    b.ToTable("targetallocations");
                });

            modelBuilder.Entity("PortfolioApp.Enities.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<ulong>("AutoDetermineStrategy")
                        .HasColumnType("bit")
                        .HasColumnName("autodeterminestrategy");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("EmailCooldownEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("emailcooldownenabled");

                    b.Property<int>("EmailCooldownHours")
                        .HasColumnType("int")
                        .HasColumnName("emailcooldownhours");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("GlobalTolerancePercent")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("globaltolerancepercent");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("hashedpassword");

                    b.Property<DateTime?>("LastDriftEmail")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastdriftemail");

                    b.Property<double>("MinimumSwappInUSD")
                        .HasColumnType("double");

                    b.Property<ulong>("NotifyOnDeviation")
                        .HasColumnType("bit")
                        .HasColumnName("notifyondeviation");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<DateTime?>("TokenGeneratedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TwoFactorCode")
                        .HasColumnType("longtext");

                    b.Property<ulong>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("twofactorenabled");

                    b.Property<DateTime?>("TwoFactorExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TwoFactorTempToken")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("twofactortemptoken");

                    b.Property<string>("UserProfileImage")
                        .HasColumnType("longtext");

                    b.HasKey("Email");

                    b.ToTable("users");
                });

            modelBuilder.Entity("PortfolioApp.Enities.Wallet", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastupdated");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("network");

                    b.Property<decimal>("UsdValue")
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("usdvalue");

                    b.HasKey("Address", "Email");

                    b.HasIndex("Email");

                    b.ToTable("wallets");
                });

            modelBuilder.Entity("PortfolioApp.Enities.CoinHolding", b =>
                {
                    b.HasOne("PortfolioApp.Enities.Wallet", "Wallet")
                        .WithMany("CoinHoldings")
                        .HasForeignKey("WalletAddress", "WalletEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("PortfolioApp.Enities.PortfolioSnapshot", b =>
                {
                    b.HasOne("PortfolioApp.Enities.User", "User")
                        .WithMany("PortfolioSnapshots")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Enities.RebalanceSession", b =>
                {
                    b.HasOne("PortfolioApp.Enities.User", "User")
                        .WithMany("RebalanceSessions")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Enities.RebalanceSwap", b =>
                {
                    b.HasOne("PortfolioApp.Enities.RebalanceSession", "Session")
                        .WithMany("RebalanceSwaps")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioApp.Enities.Wallet", "Wallet")
                        .WithMany("RebalanceSwaps")
                        .HasForeignKey("WalletId", "WalletEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("PortfolioApp.Enities.TargetAllocation", b =>
                {
                    b.HasOne("PortfolioApp.Enities.User", "User")
                        .WithMany("TargetAllocations")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Enities.Wallet", b =>
                {
                    b.HasOne("PortfolioApp.Enities.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortfolioApp.Enities.RebalanceSession", b =>
                {
                    b.Navigation("RebalanceSwaps");
                });

            modelBuilder.Entity("PortfolioApp.Enities.User", b =>
                {
                    b.Navigation("PortfolioSnapshots");

                    b.Navigation("RebalanceSessions");

                    b.Navigation("TargetAllocations");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("PortfolioApp.Enities.Wallet", b =>
                {
                    b.Navigation("CoinHoldings");

                    b.Navigation("RebalanceSwaps");
                });
#pragma warning restore 612, 618
        }
    }
}
