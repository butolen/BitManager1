@page "/application/targets"
@inject AuthenticationStateProvider AuthStateProvider
@inject DashboardService DashboardService
@inject TargetAllocationService TargetAllocationService
@inject IUserService UserService
@inject NavigationManager Navigation

@using PortfolioApp.Enities
@using Microsoft.AspNetCore.Components.Authorization
@using WebGUI.Services

<h3 class="text-white mt-4 text-center">Set Target Allocation</h3>

@if (showFeedback && !string.IsNullOrEmpty(feedbackMessage))
{
    <div class="alert alert-success text-center" role="alert" style="position: fixed; top: 80px; left: 50%; transform: translateX(-50%); z-index: 2000; width: auto; min-width: 300px;">
        @feedbackMessage
    </div>
}

@if (isLoading)
{
    <div class="text-center text-light">Loading...</div>
}
else if (userEmail is not null)
{
    <div class="container-fluid text-white mt-4">
        <div class="row">
            <!-- Left: Allocation -->
            <div class="col-lg-8">
                <div class="mb-3">
                    <label class="form-label">Search Token</label>
                    <input class="form-control bg-dark text-white mb-2" placeholder="Search symbol..."
                           @bind="searchText" @bind:event="oninput" />

                    <select class="form-select bg-dark text-white" size="5" @onchange="OnTokenSelected">
                        @foreach (var h in FilterHoldingsBySearch())
                        {
                            <option value="@h.Symbol">@h.Symbol (@h.TokenAddress[..6]...)</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">Token Address</label>
                    <input class="form-control bg-dark text-white" placeholder="Paste token address..." @bind="manualAddress" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Target %</label>
                    <input type="number" class="form-control bg-dark text-white" @bind="targetPercent" min="0" max="100" step="0.01" />
                </div>

                @if (!user!.GlobalTolerancePercent.HasValue)
                {
                    <div class="mb-3">
                        <label class="form-label">Tolerance %</label>
                        <input type="number" class="form-control bg-dark text-white"
                               @bind="tolerancePercent" min="0" max="100" step="0.01" />
                    </div>
                }
                else
                {
                    <p class="text-white">Global tolerance is set to @user.GlobalTolerancePercent%</p>
                }

                <button class="btn btn-primary w-100" @onclick="SaveAllocation">Save Allocation</button>

                @if (sumWarning)
                {
                    <div class="alert alert-danger mt-3">Total allocation exceeds 100%. Please adjust.</div>
                }

                <hr class="bg-secondary my-4" />
                <h5>Your Allocations</h5>
                <table class="table table-dark table-striped">
                    <thead>
                        <tr>
                            <th>Symbol</th>
                            <th>Target %</th>
                            <th>Tolerance %</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var a in allocations)
                        {
                            var isEditing = editableRows.Contains(a.Id);
                            if (a.TargetPercent <= 0) continue;

                            <tr>
                                <td>@a.Symbol</td>
                                <td>
                                    @if (isEditing)
                                    {
                                        <input type="number" class="form-control bg-dark text-white" style="max-width: 100px;"
                                               @bind="a.TargetPercent" min="0" max="100" step="0.01" />
                                    }
                                    else
                                    {
                                        @a.TargetPercent
                                    }
                                </td>
                                <td>
                                    @if (isEditing)
                                    {
                                        @if (!(user?.GlobalTolerancePercent.HasValue ?? false))
                                        {
                                            <input type="number" class="form-control bg-dark text-white" style="max-width: 100px;"
                                                   @bind="a.TolerancePercent" min="0" max="100" step="0.01" />
                                        }
                                        else
                                        {
                                            @user.GlobalTolerancePercent 
                                        }
                                    }
                                    else
                                    {
                                        @a.TolerancePercent
                                    }
                                </td>
                                <td>
                                    @if (isEditing)
                                    {
                                        <button class="btn btn-sm btn-primary me-2" @onclick="() => SaveAllocationInline(a)">Save</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-outline-light me-2" @onclick="() => StartEditing(a.Id)">Edit</button>
                                    }
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteAllocation(a)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Right: Settings -->
            <div class="col-lg-4 bg-dark border-start border-secondary p-3">
                <h5>Global Settings</h5>

                <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="enableGlobalTolerance" @bind="enableGlobalTolerance" />
                    <label class="form-check-label" for="enableGlobalTolerance">
                        Enable Global Tolerance
                    </label>
                </div>

                @if (enableGlobalTolerance)
                {
                    <div class="mb-3">
                        <label class="form-label">Global Tolerance %</label>
                        <input class="form-control bg-dark text-white" @bind="user.GlobalTolerancePercent" type="number" min="0" max="100" step="0.01" />
                    </div>
                }

                <div class="form-check form-switch mb-2">
                    <input class="form-check-input" type="checkbox" id="notify" @bind="user.NotifyOnDeviation" />
                    <label class="form-check-label" for="notify">
                        Notify when deviation hits
                    </label>
                </div>

                <div class="form-check form-switch mb-2">
                    <input class="form-check-input" type="checkbox" id="auto" @bind="user.AutoDetermineStrategy" />
                    <label class="form-check-label" for="auto">
                        Auto-rebalance strategy
                    </label>
                </div>

                <div class="form-check form-switch mb-2">
                    <input class="form-check-input" type="checkbox" id="cooldown" @bind="user.EmailCooldownEnabled" />
                    <label class="form-check-label" for="cooldown">
                        Limit email frequency
                    </label>
                </div>

                @if (user.EmailCooldownEnabled)
                {
                    <div class="mb-3">
                        <label class="form-label">Cooldown Hours</label>
                        <input class="form-control bg-dark text-white" type="number" @bind="user.EmailCooldownHours" min="1" max="999" />
                    </div>
                }

                <div class="mb-3">
                    <label class="form-label">Only execute swaps above this USD value</label>
                    <input class="form-control bg-dark text-white" type="number" @bind="user.MinimumSwappInUSD" min="0" step="0.01" />
                </div>

                <button class="btn btn-primary w-100" @onclick="SaveUserSettings">Save Settings</button>
            </div>
        </div>
    </div>
}

@code {
    private string? userEmail;
    private List<CoinHolding> userHoldings = new();
    private List<CoinHolding> filteredHoldings = new();
    private List<TargetAllocation> allocations = new();
    private string searchText = "";
    private string manualAddress = "";
    private string? selectedSymbol;
    private double targetPercent;
    private double tolerancePercent;
    private bool isLoading = true;
    private bool sumWarning = false;
    private User? user;
    private string? feedbackMessage;
    private bool showFeedback;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var principal = auth.User;
        if (!principal.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/welcome");
            return;
        }

        userEmail = principal.Identity?.Name;
        if (userEmail is not null)
        {
            user = UserService.GetByEmail(userEmail);
            userHoldings = DashboardService.GetUniqueHoldingsByAddressForUser(userEmail);
            filteredHoldings = userHoldings;
            allocations = TargetAllocationService.GetAllocations(userEmail);
        }

        isLoading = false;
    }

    private void SaveAllocation()
    {
        if (string.IsNullOrEmpty(selectedSymbol) || string.IsNullOrEmpty(userEmail) || string.IsNullOrEmpty(manualAddress))
            return;

        double total = allocations
            .Where(a => a.Symbol != selectedSymbol)
            .Sum(a => a.TargetPercent) + targetPercent;

        sumWarning = total > 100.0;
        if (sumWarning) return;

        var toleranceToUse = user!.GlobalTolerancePercent ?? tolerancePercent;
        TargetAllocationService.SetAllocation(userEmail, selectedSymbol, manualAddress, targetPercent, toleranceToUse);
        allocations = TargetAllocationService.GetAllocations(userEmail);

        selectedSymbol = null;
        manualAddress = "";
        targetPercent = 0;
        tolerancePercent = 0;

        ShowFeedback("Allocation saved successfully.");
    }

    private void SaveUserSettings()
    {
        if (user is not null)
        {
            UserService.Update(user);
            if (user.GlobalTolerancePercent != null)
            {
                TargetAllocationService.SetGlobalTolerance(user.Email, Convert.ToDouble(user.GlobalTolerancePercent));
            }

            ShowFeedback("Settings saved successfully.");
        }
    }

    private void DeleteAllocation(TargetAllocation a)
    {
        TargetAllocationService.DeleteAllocation(a.Id);
        allocations = TargetAllocationService.GetAllocations(userEmail!);
    }

    private IEnumerable<CoinHolding> FilterHoldingsBySearch()
    {
        return userHoldings
            .Where(h => h.Symbol.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .OrderBy(h => h.Symbol);
    }

    private void OnTokenSelected(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString();
        var match = userHoldings.FirstOrDefault(h => h.Symbol == selected);
        if (match != null)
        {
            selectedSymbol = match.Symbol;
            manualAddress = match.TokenAddress;
            searchText = match.Symbol;
        }
    }

    private bool enableGlobalTolerance
    {
        get => user?.GlobalTolerancePercent.HasValue ?? false;
        set
        {
            if (user != null)
            {
                if (value)
                    user.GlobalTolerancePercent ??= 5;
                else
                    user.GlobalTolerancePercent = null;
            }
        }
    }

    private HashSet<int> editableRows = new();

    private void StartEditing(int id)
    {
        editableRows.Clear();
        editableRows.Add(id);
    }

    private void SaveAllocationInline(TargetAllocation a)
    {
        if (!string.IsNullOrEmpty(userEmail))
        {
            var tolerance = user!.GlobalTolerancePercent ?? a.TolerancePercent;
            TargetAllocationService.SetAllocation(userEmail, a.Symbol, a.Address, a.TargetPercent, tolerance);
            allocations = TargetAllocationService.GetAllocations(userEmail);
            editableRows.Remove(a.Id);

            ShowFeedback("Allocation updated.");
        }
    }

    private async void ShowFeedback(string message)
    {
        feedbackMessage = message;
        showFeedback = true;
        StateHasChanged();
        await Task.Delay(3000);
        showFeedback = false;
        StateHasChanged();
    }
}
